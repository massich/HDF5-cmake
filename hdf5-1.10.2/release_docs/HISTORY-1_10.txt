HDF5 History
============

This file contains development history of the HDF5 1.10 branch

03.      Release Information for hdf5-1.10.1
02.      Release Information for hdf5-1.10.0-patch1 
01.      Release Information for hdf5-1.10.0

[Search on the string '%%%%' for section breaks of each release.]

%%%%1.10.1%%%%

HDF5 version 1.10.1 released on 2017-04-27
================================================================================

INTRODUCTION

This document describes the differences between HDF5-1.10.0-patch1 and
HDF5 1.10.1, and contains information on the platforms tested and known
problems in HDF5-1.10.1. For more details check the HISTORY*.txt files
in the HDF5 source.

Links to HDF5 1.10.1 source code, documentation, and additional materials can
be found on The HDF5 web page at:

     https://support.hdfgroup.org/HDF5/

The HDF5 1.10.1 release can be obtained from:

     https://support.hdfgroup.org/HDF5/release/obtain5.html

User documentation for the snapshot can be accessed directly at this location:

     https://support.hdfgroup.org/HDF5/doc/

New features in the HDF5-1.10.x release series, including brief general
descriptions of some new and modified APIs, are described in the "New Features
in HDF5 Release 1.10" document:

     https://support.hdfgroup.org/HDF5/docNewFeatures/index.html

All new and modified APIs are listed in detail in the "HDF5 Software Changes
from Release to Release" document, in the section "Release 10.1 (current
release) versus Release 1.10.0

     https://support.hdfgroup.org/HDF5/doc/ADGuide/Changes.html

If you have any questions or comments, please send them to the HDF Help Desk:

    help@hdfgroup.org


CONTENTS

- Major New Features Introduced in HDF5 1.10.1
- Other New Features and Enhancements
- Support for New Platforms, Languages, and Compilers
- Bug Fixes since HDF5-1.10.0-patch1
- Supported Platforms
- Tested Configuration Features Summary
- More Tested Platforms
- Known Problems


Major New Features Introduced in HDF5 1.10.1
============================================

For links to the RFCs and documentation in this section please view
https://support.hdfgroup.org/HDF5/docNewFeatures in a web browser.

________________________________________
Metadata Cache Image
________________________________________

    HDF5 metadata is typically small, and scattered throughout the HDF5 file.
    This can affect performance, particularly on large HPC systems. The
    Metadata Cache Image feature can improve performance by writing the
    metadata cache in a single block on file close, and then populating the
    cache with the contents of this block on file open, thus avoiding the many
    small I/O operations that would otherwise be required on file open and
    close. See the RFC for complete details regarding this feature. Also,
    see the Fine Tuning the Metadata Cache documentation.

    At present, metadata cache images may not be generated by parallel
    applications.  Parallel applications can read files with metadata cache
    images, but since this is a collective operation, a deadlock is possible
    if one or more processes do not participate.

________________________________________
Metadata Cache Evict on Close
________________________________________

    The HDF5 library's metadata cache is fairly conservative about holding on
    to HDF5 object metadata (object headers, chunk index structures, etc.),
    which can cause the cache size to grow, resulting in memory pressure on
    an application or system. The "evict on close" property will cause all
    metadata for an object to be evicted from the cache as long as metadata
    is not referenced from any other open object. See the Fine Tuning the
    Metadata Cache documentation for information on the APIs.

    At present, evict on close is disabled in parallel builds.

________________________________________
Paged Aggregation
________________________________________

    The current HDF5 file space allocation accumulates small pieces of metadata
    and raw data in aggregator blocks which are not page aligned and vary
    widely in sizes. The paged aggregation feature was implemented to provide
    efficient paged access of these small pieces of metadata and raw data.
    See the RFC for details. Also, see the File Space Management documentation.

________________________________________
Page Buffering
________________________________________

    Small and random I/O accesses on parallel file systems result in poor
    performance for applications. Page buffering in conjunction with paged
    aggregation can improve performance by giving an application control of
    minimizing HDF5 I/O requests to a specific granularity and alignment.
    See the RFC for details. Also, see the Page Buffering documentation.

    At present, page buffering is disabled in parallel builds.



Other New Features and Enhancements
===================================

    Library
    -------
    - Added a mechanism for disabling the SWMR file locking scheme.

      The file locking calls used in HDF5 1.10.0 (including patch1)
      will fail when the underlying file system does not support file
      locking or where locks have been disabled. To disable all file
      locking operations, an environment variable named
      HDF5_USE_FILE_LOCKING can be set to the five-character string
      'FALSE'. This does not fundamentally change HDF5 library
      operation (aside from initial file open/create, SWMR is lock-free),
      but users will have to be more careful about opening files
      to avoid problematic access patterns (i.e.: multiple writers)
      that the file locking was designed to prevent.

      Additionally, the error message that is emitted when file lock
      operations set errno to ENOSYS (typical when file locking has been
      disabled) has been updated to describe the problem and potential
      resolution better.

      (DER, 2016/10/26, HDFFV-9918)

    - The return type of H5Pget_driver_info() has been changed from void *
      to const void *.

      The pointer returned by this function points to internal library
      memory and should not be freed by the user.

      (DER, 2016/11/04, HDFFV-10017)

    - The direct I/O VFD has been removed from the list of VFDs that
      support SWMR.

      This configuration was never officially tested and several SWMR
      tests fail when this VFD is set.

      (DER, 2016/11/03, HDFFV-10169)

    Configuration:
    --------------
    - The minimum version of CMake required to build HDF5 is now 3.2.2.

      (ADB, 2017/01/10)

    - An --enable/disable-developer-warnings option has been added to
      configure.

      This disables warnings that do not indicate poor code quality such
      as -Winline and gcc's -Wsuggest-attribute. Developer warnings are
      disabled by default.

      (DER, 2017/01/10)

    - A bin/restore.sh script was added that reverts autogen.sh processing.

      (DER, 2016/11/08)

    - CMake: Added NAMESPACE hdf5:: to package configuration files to allow
      projects using installed HDF5 binaries built with CMake to link with
      them without specifying the HDF5 library location via IMPORTED_LOCATION.

      (ABD, 2016/10/17, HDFFV-10003)

    - CMake: Changed the CTEST_BUILD_CONFIGURATION option to
      CTEST_CONFIGURATION_TYPE as recommended by the CMake documentation.

      (ABD, 2016/10/17, HDFFV-9971)


    Fortran Library:
    ----------------

    - The HDF5 Fortran library can now be compiled with the NAG compiler.

      (MSB, 2017/2/10, HDFFV-9973)


    C++ Library:
    ------------

    - The following C++ API wrappers have been added to the C++ Library:

        // Sets/Gets the strategy and the threshold value that the library
        // will employ in managing file space.
        FileCreatPropList::setFileSpaceStrategy - H5Pset_file_space_strategy
        FileCreatPropList::getFileSpaceStrategy - H5Pget_file_space_strategy

        // Sets/Gets the file space page size for paged aggregation.
        FileCreatPropList::setFileSpacePagesize - H5Pset_file_space_page_size
        FileCreatPropList::getFileSpacePagesize - H5Pget_file_space_page_size

        // Checks if the given ID is valid.
        IdComponent::isValid - H5Iis_valid

        // Sets/Gets the number of soft or user-defined links that can be
        // traversed before a failure occurs.
        LinkAccPropList::setNumLinks - H5Pset_nlinks
        LinkAccPropList::getNumLinks - H5Pget_nlinks

        // Returns a copy of the creation property list of a datatype.
        DataType::getCreatePlist - H5Tget_create_plist

        // Opens/Closes an object within a group or a file, regardless of object
        // type
        Group::getObjId - H5Oopen
        Group::closeObjId - H5Oclose

        // Maps elements of a virtual dataset to elements of the source dataset.
        DSetCreatPropList::setVirtual - H5Pset_virtual

        // Gets general information about this file.
        H5File::getFileInfo - H5Fget_info2

        // Returns the number of members in a type.
        IdComponent::getNumMembers - H5Inmembers

        // Determines if an element type exists.
        IdComponent::typeExists - H5Itype_exists

        // Determines if an object exists.
        H5Location::exists - H5Lexists.

        // Returns the header version of an HDF5 object.
        H5Object::objVersion - H5Oget_info for version

      (BMR, 2017/03/20, HDFFV-10004, HDFFV-10139, HDFFV-10145)

    - New exception: ObjHeaderIException for H5O interface.

      (BMR, 2017/03/15, HDFFV-10145)

    - New class LinkAccPropList for link access property list, to be used by
      wrappers of H5Lexists.

      (BMR, 2017/01/04, HDFFV-10145)

    - New constructors to open datatypes in ArrayType, CompType, DataType,
      EnumType, FloatType, IntType, StrType, and VarLenType.

      (BMR, 2016/12/26, HDFFV-10056)

    - New member functions:

        DSetCreatPropList::setNbit() to setup N-bit compression for a dataset.

        ArrayType::getArrayNDims() const
        ArrayType::getArrayDims() const
        both to replace the non-const versions.

      (BMR, 2016/04/25, HDFFV-8623, HDFFV-9725)


    Tools:
    ------
     - The following options have been added to h5clear:
       -s: clear the status_flags field in the file's superblock
       -m: Remove the metadata cache image from the file

       (QAK, 2017/03/22, PR#361)


    High-Level APIs:
    ---------------
     - Added New Fortran 2003 API for h5tbmake_table_f.

       (MSB, 2017/02/10, HDFFV-8486)



Support for New Platforms, Languages, and Compilers
===================================================

    - Added NAG compiler



Bug Fixes since HDF5-1.10.0-patch1 release
==================================

    Library
    -------
    - Outdated data structure was used in H5D_CHUNK_DEBUG blocks, causing
      compilation errors when H5D_CHUNK_DEBUG was defined.  This is fixed.

      (BMR, 2017/04/04, HDFFV-8089)

    - SWMR implementation in the HDF5 1.10.0 and 1.10.0-patch1 releases has a
      broken metadata flush dependency that manifested itself with the following
      error at the end of the HDF5 error stack:

      H5Dint.c line 846 in H5D__swmr_setup(): dataspace chunk index must be 0
      for SWMR access, chunkno = 1
      major: Dataset
      minor: Bad value

      It was also reported at https://github.com/areaDetector/ADCore/issues/203

      The flush dependency is fixed in this release.

    - Changed the plugins dlopen option from RTLD_NOW to RTLD_LAZY

      (ABD, 2016/12/12, PR#201)

    - A number of issues were fixed when reading/writing from/to corrupted
      files to ensure that the library fails gracefully in these cases:

      * Writing to a corrupted file that has an object message which is
        incorrectly marked as sharable on disk results in a buffer overflow /
        invalid write instead of a clean error message.

      * Decoding data from a corrupted file with a dataset encoded with the
        H5Z_NBIT decoding can result in a code execution vulnerability under
        the context of the application using the HDF5 library.

      * When decoding an array datatype from a corrupted file, the HDF5 library
        fails to return an error in production if the number of dimensions
        decoded is greater than the maximum rank.

      * When decoding an "old style" array datatype from a corrupted file, the
        HDF5 library fails to return an error in production if the number of
        dimensions decoded is greater than the maximum rank.

      (NAF, 2016/10/06, HDFFV-9950, HDFFV-9951, HDFFV-9992, HDFFV-9993)

    - Fixed an error that would occur when copying an object with an attribute
      which is a compound datatype consisting of a variable length string.

      (VC, 2016/08/24, HDFFV-7991)

    - H5DOappend will no longer fail if a dataset has no append callback
      registered.

      (VC, 2016/08/14, HDFFV-9960)

    - Fixed an issue where H5Pset_alignment could result in misaligned blocks
      with some input combinations, causing an assertion failure in debug mode.

      (NAF, 2016/08/11, HDFFV-9948)

    - Fixed a problem where a plugin compiled into a DLL in the default plugin
      directory could not be found by the HDF5 library at runtime on Windows
      when the HDF5_PLUGIN_PATH environment variable was not set.

      (ABD, 2016/08/01, HDFFV-9706)

    - Fixed an error that would occur when calling H5Adelete on an attribute
      which is attached to an externally linked object in the target file and
      whose datatype is a committed datatype in the main file.

      (VC, 2016/07/06, HDFFV-9940)

    - (a) Throw an error instead of assertion when v1 btree level hits the 1
          byte limit.
      (b) Modifications to better handle error recovery when conversion by
          h5format_convert fails.

      (VC, 2016/05/29, HDFFV-9434)

    - Fixed a memory leak where an array used by the library to track SWMR
      read retries was unfreed.

      The leaked memory was small (on the order of a few tens of ints) and
      allocated per-file. The memory was allocated (and lost) only when a
      file was opened for SWMR access.

      (DER, 2016/04/27, HDFFV-9786)

    - Fixed a memory leak that could occur when opening a file for the first
      time (including creating) and the call fails.

      This occurred when the file-driver-specific info was not cleaned up.
      The amount of memory leaked varied with the file driver, but would
      normally be less than 1 kB.

      (DER, 2016/12/06, HDFFV-10168)

    - Fixed a failure in collective metadata writes.

      This failure only appeared when collective metadata writes
      were enabled (via H5Pset_coll_metadata_write()).

      (JRM, 2017/04/10, HDFFV-10055)


    Parallel Library
    ----------------
    - Fixed a bug that could occur when allocating a chunked dataset in parallel
      with an alignment set and an alignment threshold greater than the chunk
      size but less than or equal to the raw data aggregator size.

      (NAF, 2016/08/11, HDFFV-9969)


    Configuration
    -------------
    - Configuration will check for the strtoll and strtoull functions
      before using alternatives

      (ABD, 2017/03/17, PR#340)

    - CMake uses a Windows pdb directory variable if available and
      will generate both static and shared pdb files.

      (ABD, 2017/02/06, HDFFV-9875)

    - CMake now builds shared versions of tools.

      (ABD, 2017/02/01, HDFFV-10123)

    - Makefiles and test scripts have been updated to correctly remove files
      created when running "make check" and to avoid removing any files under
      source control.  In-source builds followed by "make clean" and "make
      distclean" should result in the original source files.
      (LRK, 2017/01/17, HDFFV-10099)

    - The tools directory has been divided into two separate source and test
      directories. This resolves a build dependency and, as a result,
      'make check' will no longer fail in the tools directory if 'make' was
      not executed first.

      (ABD, 2016/10/27, HDFFV-9719)

    - CMake: Fixed a timeout error that would occasionally occur when running
      the virtual file driver tests simultaneously due to test directory
      and file name collisions.

      (ABD, 2016/09/19, HDFFV-9431)

    - CMake: Fixed a command length overflow error by converting custom
      commands inside CMakeTest.cmake files into regular dependencies and
      targets.

      (ABD, 2016/07/12, HDFFV-9939)

    - Fixed a problem preventing HDF5 to be built on 32-bit CYGWIN by
      condensing cygwin configuration files into a single file and
      removing outdated compiler settings.

      (ABD, 2016/07/12, HDFFV-9946)


    Fortran
    --------
    - Changed H5S_ALL_F from INTEGER to INTEGER(HID_T)

      (MSB, 2016/10/14, HDFFV-9987)


    Tools
    -----
    - h5diff now correctly ignores strpad in comparing strings.

      (ABD, 2017/03/03, HDFFV-10128)

    - h5repack now correctly parses the command line filter options.

      (ABD, 2017/01/24, HDFFV-10046)

    - h5diff now correctly returns an error when it cannot read data due
      to an unavailable filter plugin.

      (ADB 2017/01/18, HDFFV-9994 )

    - Fixed an error in the compiler wrapper scripts (h5cc, h5fc, et al.)
      in which they would erroneously drop the file argument specified via
      the -o flag when the -o flag was specified before the -c flag on the
      command line, resulting in a failure to compile.

      (LRK, 2016/11/04, HDFFV-9938, HDFFV-9530)

    - h5repack User Defined (UD) filter parameters were not parsed correctly.

      The UD filter parameters were not being parsed correctly. Reworked coding
      section to parse the correct values and verify number of parameters.

      (ABD, 2016/10/19, HDFFV-9996, HDFFV-9974, HDFFV-9515, HDFFV-9039)

    - h5repack allows the --enable-error-stack option on the command line.

      (ADB, 2016/08/08, HDFFV-9775)


    C++ APIs
    --------
    - The member function H5Location::getNumObjs() is moved to
      class Group because the objects are in a group or a file only,
      and H5Object::getNumAttrs to H5Location to get the number of
      attributes at a given location.

      (BMR, 2017/03/17, PR#466)

    - Due to the change in the C API, the overloaded functions of
      PropList::setProperty now need const for some arguments.  They are
      planned for deprecation and are replaced by new versions with proper
      consts.

      (BMR, 2017/03/17, PR#344)

    - The high-level API Packet Table (PT) did not write data correctly when
      the datatype is a compound type that has string type as one of the
      members.  This problem started in 1.8.15, after the fix of HDFFV-9042
      was applied, which caused the Packet Table to use native type to access
      the data.  It should be up to the application to specify whether the
      buffer to be read into memory is in the machine's native architecture.
      Thus, the PT is fixed to not use native type but to make a copy of the
      user's provided datatype during creation or the packet table's datatype
      during opening.  If an application wishes to use native type to read the
      data, then the application will request that.  However, the Packet Table
      doesn't provide a way to specify memory datatype in this release.  This
      feature will be available in future releases.

      (BMR, 2016/10/27, HDFFV-9758)

    - The obsolete macros H5_NO_NAMESPACE and H5_NO_STD have been removed from
      the HDF5 C++ API library.

      (BMR, 2016/10/23, HDFFV-9532)

    - The problem where a user-defined function cannot access both, attribute
      and dataset, using only one argument is now fixed.

      (BMR, 2016/10/11, HDFFV-9920)

    - In-memory array information, ArrayType::rank and
      ArrayType::dimensions, were removed. This is an implementation
      detail and should not affect applications.

      (BMR, 2016/04/25, HDFFV-9725)


    Testing
    -------
    - Fixed a problem that caused tests using SWMR to occasionally fail when
      running "make check" using parallel make.

      (LRK, 2016/03/22, PR#338, PR#346, PR#358)


Supported Platforms
===================

    Linux 2.6.32-573.18.1.el6.ppc64 gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)
    #1 SMP ppc64 GNU/Linux        g++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-4)
    (ostrich)                     GNU Fortran (GCC) 4.4.7 20120313
                                      (Red Hat 4.4.7-4)
                                  IBM XL C/C++ V13.1
                                  IBM XL Fortran V15.1

    Linux 3.10.0-327.10.1.el7     GNU C (gcc), Fortran (gfortran), C++ (g++)
    #1 SMP x86_64 GNU/Linux       compilers:
    (kituo/moohan)                  Version 4.8.5 20150623 (Red Hat 4.8.5-4)
                                    Version 4.9.3, Version 5.2.0
                                  Intel(R) C (icc), C++ (icpc), Fortran (icc)
                                  compilers:
                                     Version 15.0.3.187 Build 20150407
                                  MPICH 3.1.4 compiled with GCC 4.9.3

    SunOS 5.11 32- and 64-bit     Sun C 5.12 SunOS_sparc
    (emu)                         Sun Fortran 95 8.6 SunOS_sparc
                                  Sun C++ 5.12 SunOS_sparc

    Windows 7                     Visual Studio 2012 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2013 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2015 w/ Intel Fortran 16 (cmake)

    Windows 7 x64                 Visual Studio 2012 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2013 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2015 w/ Intel Fortran 16 (cmake)
                                  Visual Studio 2015 w/ MSMPI 8 (cmake)
                                  Cygwin(CYGWIN_NT-6.1 2.8.0(0.309/5/3)
                                      gcc and gfortran compilers (GCC 5.4.0)
                                      (cmake and autotools)

    Windows 10                    Visual Studio 2015 w/ Intel Fortran 16 (cmake)
                                  Cygwin(CYGWIN_NT-6.1 2.8.0(0.309/5/3)
                                      gcc and gfortran compilers (GCC 5.4.0)
                                      (cmake and autotools)

    Windows 10 x64                Visual Studio 2015 w/ Intel Fortran 16 (cmake)

    Mac OS X Mt. Lion 10.8.5      Apple clang/clang++ version 5.1 from Xcode 5.1
    64-bit                        gfortran GNU Fortran (GCC) 4.8.2
    (swallow/kite)                Intel icc/icpc/ifort version 15.0.3

    Mac OS X Mavericks 10.9.5     Apple clang/clang++ version 6.0 from Xcode 6.2
    64-bit                        gfortran GNU Fortran (GCC) 4.9.2
    (wren/quail)                  Intel icc/icpc/ifort version 15.0.3

    Mac OS X Yosemite 10.10.5     Apple clang/clang++ version 6.1 from Xcode 7.0
    64-bit                        gfortran GNU Fortran (GCC) 4.9.2
    (osx1010dev/osx1010test)      Intel icc/icpc/ifort version 15.0.3

    Mac OS X El Capitan 10.11.6   Apple clang/clang++ version 7.3 from Xcode 7.3
    64-bit                        gfortran GNU Fortran (GCC) 5.2.0
    (osx1010dev/osx1010test)      Intel icc/icpc/ifort version 16.0.2


Tested Configuration Features Summary
=====================================

    In the tables below
          y   = tested
          n   = not tested in this release
          C   = Cluster
          W   = Workstation
          x   = not working in this release
          dna = does not apply
          ( ) = footnote appears below second table
          <blank> = testing incomplete on this feature or platform

Platform                              C         F90/   F90      C++  zlib  SZIP
                                      parallel  F2003  parallel
Solaris2.11 32-bit                      n        y/y    n        y    y     y
Solaris2.11 64-bit                      n        y/n    n        y    y     y
Windows 7                               y        y/y    n        y    y     y
Windows 7 x64                           y        y/y    y        y    y     y
Windows 7 Cygwin                        n        y/n    n        y    y     y
Windows 7 x64 Cygwin                    n        y/n    n        y    y     y
Windows 10                              y        y/y    n        y    y     y
Windows 10 x64                          y        y/y    n        y    y     y
Mac OS X Mountain Lion 10.8.5 64-bit    n        y/y    n        y    y     y
Mac OS X Mavericks 10.9.5 64-bit        n        y/y    n        y    y     y
Mac OS X Yosemite 10.10.5 64-bit        n        y/y    n        y    y     y
Mac OS X El Capitan 10.11.6 64-bit      n        y/y    n        y    y     y
CentOS 7.2 Linux 2.6.32 x86_64 PGI      n        y/y    n        y    y     y
CentOS 7.2 Linux 2.6.32 x86_64 GNU      y        y/y    y        y    y     y
CentOS 7.2 Linux 2.6.32 x86_64 Intel    n        y/y    n        y    y     y
Linux 2.6.32-573.18.1.el6.ppc64         n        y/y    n        y    y     y


Platform                                 Shared  Shared    Shared    Thread-
                                         C libs  F90 libs  C++ libs  safe
Solaris2.11 32-bit                         y       y         y         y
Solaris2.11 64-bit                         y       y         y         y
Windows 7                                  y       y         y         y
Windows 7 x64                              y       y         y         y
Windows 7 Cygwin                           n       n         n         y
Windows 7 x64 Cygwin                       n       n         n         y
Windows 10                                 y       y         y         y
Windows 10 x64                             y       y         y         y
Mac OS X Mountain Lion 10.8.5 64-bit       y       n         y         y
Mac OS X Mavericks 10.9.5 64-bit           y       n         y         y
Mac OS X Yosemite 10.10.5 64-bit           y       n         y         y
Mac OS X El Capitan 10.11.6 64-bit         y       n         y         y
CentOS 7.2 Linux 2.6.32 x86_64 PGI         y       y         y         n
CentOS 7.2 Linux 2.6.32 x86_64 GNU         y       y         y         y
CentOS 7.2 Linux 2.6.32 x86_64 Intel       y       y         y         n
Linux 2.6.32-573.18.1.el6.ppc64            y       y         y         n

Compiler versions for each platform are listed in the preceding
"Supported Platforms" table.


More Tested Platforms
=====================

The following platforms are not supported but have been tested for this release.

    Linux 2.6.32-573.22.1.el6     GNU C (gcc), Fortran (gfortran), C++ (g++)
    #1 SMP x86_64 GNU/Linux       compilers:
    (mayll/platypus)                 Version 4.4.7 20120313
                                     Version 4.8.4
                                  PGI C, Fortran, C++ for 64-bit target on
                                  x86-64;
                                      Version 16.10-0
                                  Intel(R) C (icc), C++ (icpc), Fortran (icc)
                                  compilers:
                                     Version 15.0.3.187 (Build 20150407)
                                  MPICH 3.1.4 compiled with GCC 4.9.3

    Linux 3.10.0-327.18.2.el7     GNU C (gcc) and C++ (g++) compilers
    #1 SMP x86_64 GNU/Linux          Version 4.8.5 20150623 (Red Hat 4.8.5-4)
    (jelly)                       with NAG Fortran Compiler Release 6.1(Tozai)
                                  Intel(R) C (icc) and C++ (icpc) compilers
                                     Version 15.0.3.187 (Build 20150407)
                                  with NAG Fortran Compiler Release 6.1(Tozai)

    Linux 2.6.32-573.18.1.el6.ppc64  MPICH mpich 3.1.4 compiled with
    #1 SMP ppc64 GNU/Linux           IBM XL C/C++ for Linux, V13.1
    (ostrich)                        and IBM XL Fortran for Linux, V15.1

    Debian 8.4 3.16.0-4-amd64 #1 SMP Debian 3.16.36-1 x86_64 GNU/Linux
                                  gcc, g++ (Debian 4.9.2-10) 4.9.2
                                  GNU Fortran (Debian 4.9.2-10) 4.9.2
                                  (cmake and autotools)

    Fedora 24  4.7.2-201.fc24.x86_64 #1 SMP x86_64 x86_64 x86_64 GNU/Linux
                                  gcc, g++ (GCC) 6.1.1 20160621
                                      (Red Hat 6.1.1-3)
                                  GNU Fortran (GCC) 6.1.1 20160621
                                      (Red Hat 6.1.1-3)
                                  (cmake and autotools)

    Ubuntu 16.04.1 4.4.0-38-generic #57-Ubuntu SMP x86_64 GNU/Linux
                                  gcc, g++ (Ubuntu 5.4.0-6ubuntu1~16.04.2)
                                      5.4.0 20160609
                                  GNU Fortran (Ubuntu 5.4.0-6ubuntu1~16.04.2)
                                      5.4.0 20160609
                                  (cmake and autotools)


Known Problems
==============

    At present, metadata cache images may not be generated by parallel
    applications.  Parallel applications can read files with metadata cache
    images, but since this is a collective operation, a deadlock is possible
    if one or more processes do not participate.

    Known problems in previous releases can be found in the HISTORY*.txt files
    in the HDF5 source. Please report any new problems found to
    help@hdfgroup.org.


%%%%1.10.0-patch1%%%%


HDF5 version 1.10.0-patch1 released on 2016-05-23
================================================================================

INTRODUCTION

This document describes the differences between HDF5-1.8 series and
HDF5 1.10.0 releases, and contains information on the platforms
tested.

Links to HDF5 1.10.0 source code can be found on The HDF Group's
development FTP server at the following location:

    https://www.hdfgroup.org/HDF5/release/obtain5110.html

User documentation can be accessed directly at this location:

    https://www.hdfgroup.org/HDF5/docNewFeatures/

For more information, see the HDF5 home page:

    https://www.hdfgroup.org/HDF5/

If you have any questions or comments, please send them to the HDF
Help Desk:

    help@hdfgroup.org



CONTENTS

- New Features
- Issues Addressed in this Release
- Supported Platforms
- Tested Configuration Features Summary
- More Tested Platforms
- Known Problems and Limitations



New Features
============
This release supports the following features:

    Configuration
    -------------
    - API Compatibility with HDF5 1.8 Flag Was Added

      The 1.10 version of the HDF5 Library can be configured to operate
      identically to the 1.8 library with the --with-default-api-version=v18
      configure flag. This allows existing code to be compiled with the 1.10
      library without requiring immediate changes to the application source
      code. For addtional configuration options and other details, see
      "API Compatibility Macros in HDF5" at
      https://www.hdfgroup.org/HDF5/doc/RM/APICompatMacros.html.

    - Autotools Configuration Has Been Extensively Reworked

      The autotools configuration options have been updated to allow more
      fine-grained control of the build options and to correct some bugs.
      See configure --help for comprehensive information on each option.

      Specific changes:

      * --enable-debug and --enable-production are no longer accepted.
        Use --enable-build-mode=(debug | production) instead. These set
        appropriate defaults for symbols, optimizations, and other
        configuration options. These defaults can be overridden by the
        user.

      * Extra debug output messages are no longer enabled with
        --enable-debug=<package list>. Use --enable-internal-debug=<pkg list>
        instead.

      * A new --enable-symbols option allows symbols to be generated
        independently of the build mode. --disable-symbols can be used
        to strip symbols from the binary.

      * A new --enable-asserts option sets/unsets NDEBUG. This is
        independent of the build mode. This also enables some extra
        low-overhead debug checks in the library.

      * A new --enable-profiling option sets profiling flags. This is
        independent of the build mode.

      * A new --enable-optimization option sets the optimization level.
        This is independent of the build mode.

      * Many of these options can take a flags string that will be used
        to build the library. This can be useful for specifying custom
        optimization flags such as -Os and -Ofast.

      * gnu C++ and Fortran use configure sub-files that update the
        build flags and turn on warnings. The increase in warnings when
        building these wrapper libraries is due to these flag changes
        and not to a decrease in code quality.

      * The option to clear file buffers has been removed. Any buffer that
        will eventually be written to disk will now always be memset
        to zero. This prevents the previous contents of the buffer from
        being written to the disk if the buffer contents are not
        completely overwritten, which has security implications.

    - LFS Changes

      The way the autotools handle large file support (LFS) has been
      overhauled in this release.

      * We assume ftello and fseeko exist

      * We no longer explicitly use the *64 I/O functions. Instead, we
        rely on a mapping provided by _FILE_OFFSET_BITS or its equivalent.

      * _LARGEFILE(64)_SOURCE is no longer exported via AM_CPPFLAGS.



    Parallel Library
    -----------------
    - Collective Metadata I/O

      Calls for HDF5 metadata can result in many small reads and writes.
      On metadata reads, collective metadata I/O can improve performance
      by allowing the library to perform optimizations when reading the
      metadata by having one rank read the data and broadcasting it to
      all other ranks.

      Collective metadata I/O improves metadata write performance through
      the construction of an MPI derived datatype that is then written
      collectively in a single call. For more information, see
      https://www.hdfgroup.org/HDF5/docNewFeatures/NewFeaturesCollectiveMetadataIoDocs.html.



    Library
    --------
    - Concurrent Access to HDF5 Files - Single Writer/ Multple Reader (SWMR)

      The Single Writer/ Multiple Reader or SWMR feature enables users to
      read data concurrently while writing it. Communications between the
      processes and file locking are not required. The processes can run
      on the same or on different platforms as long as they share a common
      file system that is POSIX compliant. For more information, see the
      Single-Writer/Multiple-Reader (SWMR) documentation at
      https://www.hdfgroup.org/HDF5/docNewFeatures/NewFeaturesSwmrDocs.html.

    - Virtual Dataset (VDS)

      The VDS feature enables data to be accessed across HDF5 files
      using standard HDF5 objects such as groups and datasets without
      rewriting or rearranging the data. An HDF5 virtual dataset (VDS)
      is an HDF5 dataset that is composed of source HDF5 datasets in
      a predefined mapping. VDS can be used with the SWMR feature. For
      documentation, check
      https://www.hdfgroup.org/HDF5/docNewFeatures/NewFeaturesVirtualDatasetDocs.html.

    - Persistent Free File Space Tracking

      Usage patterns when working with an HDF5 file sometimes result in
      wasted space within the file. This can also impair access times
      when working with the resulting files. The new file space management
      feature provides strategies for managing space in a file to improve
      performance in both of these areas. For more information, see
      https://www.hdfgroup.org/HDF5/docNewFeatures/NewFeaturesFileSpaceMgmtDocs.html.

    - Version 3 Metadata Cache

      The version 3 metadata cache moves management of metadata I/O from 
      the clients to the metadata cache proper.  This change is essential for
      SWMR and other features that have yet to be released.



    C++ Library
    ------------
    - New Member Function Added to H5::ArrayType

      The assignment operator ArrayType::operator= was added because
      ArrayType has pointer data members.

      (BMR - 2016/03/07, HDFFV-9562)



    Tools
    ------
    - h5watch

      The h5watch tool allows users to output new records appended to
      a dataset under SWMR access as it grows. The functionality is
      similar to the Unix user command "tail" with the follow option,
      which outputs appended data as the file grows. For more
      information, see
      https://www.hdfgroup.org/HDF5/docNewFeatures/NewFeaturesSwmrDocs.html#Tools.

    - h5format_convert

      The h5format_convert tool allows users to convert the indexing
      type of a chunked dataset made with a 1.10.x version of the HDF5
      Library when the latest file format is used to the 1.8.x version 1 B-tree indexing
      type. For example, datasets created using SWMR access, can be
      converted to be accessed by the HDF5 1.18 library and tools. The
      tool does not rewrite raw data, but it does rewrite HDF5 metadata.



    High-Level APIs
    ----------------
    - H5DOappend

      The function appends data to a dataset along a specified dimension.


    C Packet Table API
    ------------------
    - Replacement of a Public Function with H5PTcreate

      The existing function H5PTcreate_fl limits applications so they
      can use the deflate compression only. The public function
      H5PTcreate has been added to replace H5PTcreate_fl. H5PTcreate
      takes a property list identifier to provide flexibility on
      creation properties.

      (BMR - 2016/03/04, HDFFV-8623)

    - New Public Functions: H5PTget_dataset and H5PTget_type

      Two accessor functions have been added. H5PTget_dataset returns
      the identifier of the dataset associated with the packet table, 
      and H5PTget_type returns the identifier of the datatype used by
      the packet table.

      (BMR, 2016/03/04, HDFFV-8623)

    - Regarding #ifdef VLPT_REMOVED

      The #ifdef VLPT_REMOVED blocks have been removed from the packet
      table (PT) library source except for the following functions:
        + H5PTis_varlen() has been made available again
        + H5PTfree_vlen_readbuff() is now H5PTfree_vlen_buff()

      (BMR - 2016/03/04, HDFFV-442)

    C++ Packet Table API
    --------------------
    - New Constructor Added to FL_PacketTable

      An overloaded constructor has been added to FL_PacketTable and
      takes a property list identifier to provide flexibility on
      creation properties.

      (BMR - 2016/03/08, HDFFV-8623)

    - New Public Functions

      Two accessor wrappers are added to class PacketTable.
      PacketTable::GetDataset() returns the identifier of the dataset
      associated with the packet table, and PacketTable::GetDatatype()
      returns the identifier of the datatype that the packet table uses.

      (BMR - 2016/03/04, HDFFV-8623)

    - Member Functions with "char*" as an Argument

      Overloaded functions were added to provide the "const char*"
      argument; the existing version will be deprecated in future
      releases.

      (BMR - 2016/03/04, HDFFV-8623)

    - Regarding #ifdef VLPT_REMOVED

      The #ifdef VLPT_REMOVED blocks have been removed from the packet
      table library source code except for the following functions:
        + VL_PacketTable::IsVariableLength() was moved to PacketTable
        + VL_PacketTable::FreeReadBuff() is now PacketTable::FreeBuff()

      (BMR - 2016/03/04, HDFFV-442)



    Java Wrapper Library
    --------------------

    The Java HDF5 JNI library has been integrated into the HDF5 repository.
    The configure option is "--enable-java", and the CMake option is
    HDF5_BUILD_JAVA:BOOL=ON. The package hierarchy has changed from the
    HDF5 1.8 JNI, which was "ncsa.hdf.hdflib.hdf5", to HDF5 1.10,
    "hdf.hdflib.hdf5".

    A number of new APIs were added including some for VDS and SWMR.



    Other Important Changes
    -----------------------

    The hid_t type was changed from 32-bit to a 64-bit value.



Issues Addressed in this Release Since 1.10.0
=============================================

     - h5diff would return from a compare attributes abnormally if one of the datatypes
       was a vlen. This resulted in a memory leak as well as an incorrect report of
       attribute comparison.

       Fixed.
       (ADB - 2016/04/26, HDFFV-9784)

     - The JUnit-interface test may fail on Solaris platforms. The result of
       a test for verifying the content of the error stack to stdout is
       in a different order on Solaris then other platforms.

       This test is skipped on Solaris
       (ADB - 2016/04/21, HDFFV-9734)

     - When building HDF5 with Java using CMake and specifying Debug for CMAKE_BUILD_TYPE,
       there was a missing command argument for the tests of the examples.

       Fixed.
       (ADB - 2016/04/21, HDFFV-9743)

     - Changed h5diff to print a warning when a dataset is virtual, enabling
       the data to be compared. In addition h5repack failed to copy the data
       of a virtual dataset to the new file. Function H5D__get_space_status changed
       to correctly determine the H5D_space_status_t allocation value.

       CMake added the Fixed Array indexing tests that were only in the autotools
       test scripts.

       Fixed and tests added for vds issues.
       (ADB,NAF - 2016/04/21, HDFFV-9756)

     - CMake added the h5format_convert tool and tests that were only in the autotools
       build and test scripts. The autotools test script was reworked to allow CMake
       to execute the test suite in parallel.

       Also, h5clear tool and tests were added to the misc folder.

       Fixed.
       (ADB - 2016/04/21, HDFFV-9766)

     - CMake added the h5watch tool and argument tests that were only in the autotools
       build and test scripts. The POSIX only tests were not added to CMake.

       CMake HL tools files were refactored to move the CMake test scripts into each tool folder.

       Fixed.
       (ADB - 2016/04/21, HDFFV-9770)

     - Configure fails to detect valid real KINDs on FreeBSD 9.3 (i386) with Fortran enabled.

       Fixed. Added the exponential option to SELECTED_REAL_KIND to distinguish 
       KINDs of same precision
       (MSB - 2016/05/14,HDFFV-9912)


     - Corrected the f90 H5AWRITE_F integer interface's buf to be INTENT(IN).
       (MSB - 2016/05/14) 

     - Configure fails in sed command on FreeBSD 9.3 (i386) with Fortran enabled.
  
       Fixed.
       (MSB - 2016/05/14,HDFFV-9912)

     - Compile time error in H5f90global.F90 with IBM XL Fortran 14.1.0.13 on BG/Q with Fortran
       enabled.
    
       Fixed.
       (MSB - 2016/05/16,HDFFV-9917)

     - A cmake build with Fortran enabled does not install module h5fortkit

       Fixed. 
       (MSB - 2016/05/23,HDFFV-9923)


Issues Addressed in this Release Since alpha1
=============================================

     - H5Pget_virtual_printf_gap, H5Pget_virtual_view, H5Pget_efile_prefix

       The correct access property list settings from the
       H5Pget_virtual_printf_gap, H5Pget_virtual_view, and
       H5Pget_efile_prefix function calls could not be retrieved
       using H5Dget_access_plist().

       Fixed.

       (DER and NAF - 2016/03/14, HDFFV-9716)

     - h5dump

       When h5dump was provided with the name of a non-existing file or
       when optional arguments were the last option on the command line,
       h5dump would segfault.

       Fixed.

       (ADB 2016/02/28 HDFFV-9639, HDFFV-9684)

     - No Error Message for Corrupt Metadata

       The HDF5 Library did not propagate an error when it encountered
       corrupt metadata in an HDF5 file. The issue was fixed for a
       specific file provided by a user. If you still see the problem,
       please contact help@hdfgroup.org

       Fixed.

       (MC - 2016/02/18, HDFFV-9670)

     - Problem Reading Chunked Datasets with a String Datatype Larger
       Than the Chunk Size in Bytes

       When the latest file format was used and when a chunked dataset
       was created with a datatype with the size bigger than a chunk
       size, the data could not be read back. The issue was reported
       for chunked datasets with a string datatype and was confirmed
       for other datatypes with the sizes bigger than the chunk size in
       bytes.

       Fixed.

       (JM - 2016/02/13, HDFFV-9672)

     - Control over the Location of External Files

       Users were unable to specify the locations of external files.

       Two APIs - H5Pget_efile_prefix and H5Pset_efile_prefix - were
       added so that users could specify the locations of external files.

       (DER - 2016/02/04, HDFFV-8740)



Issues Addressed in this Release Since alpha0
=============================================
    - h5format_convert

      The h5format_convert tool did not downgrade the version of the
      superblock.

      Fixed. The tool now will downgrade the version of the superblock.

      (EIP 2016/01/11)

    - Crashes with multiple threads: invalid pointers

      It was reported that alpha0 crashed when used with multiple
      threads. The issue exists in the HDF5 Library versions 1.8 and
      1.9. The problem is related to a shared file pointer used in some
      miscellaneous data structures. The thread-safe library exposed
      paths in the library where a file pointer became invalid.

      The alpha1 release contains the fixes for the specific use case
      as described in HDFFV-9643. We will keep working on identifying
      and fixing other paths in the library with similar problems.

      (EIP - 2016/01/15, HDFFV-9643)



Supported Platforms
===================
The following platforms are supported and have been tested for this release.
They are built with the configure process unless specified otherwise.

    AIX 6.1                       xlc/xlc_r 10.1.0.5
    (NASA G-ADA)                  xlC/xlC_r 10.1.0.5
                                  xlf90/xlf90_r 12.1.0.6

    Linux 2.6.32-573.22.1.el6     GNU C (gcc), Fortran (gfortran), C++ (g++)
    #1 SMP x86_64 GNU/Linux       compilers:
    (mayll/platypus)                 Version 4.4.7 20120313 (Red Hat 4.4.7-16)
                                     Version 4.9.3, Version 5.2.0
                                  PGI C, Fortran, C++ for 64-bit target on
                                  x86-64;
                                      Version 15.7-0
                                  Intel(R) C (icc), C++ (icpc), Fortran (icc)
                                  compilers:
                                     Version 15.0.3.187 Build 20150407
                                  MPICH 3.1.4 compiled with GCC 4.9.3

    Linux 2.6.32-573.18.1.el6.ppc64 gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-11)
    #1 SMP ppc64 GNU/Linux        g++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-11)
    (ostrich)                     GNU Fortran (GCC) 4.4.7 20120313 (Red Hat 4.4.7-11)
                                  IBM XL C/C++ V13.1
                                  IBM XL Fortran V15.1

    Linux 3.10.0-327.10.1.el7   GNU C (gcc), Fortran (gfortran), C++ (g++)
    #1 SMP x86_64 GNU/Linux       compilers:
    (kituo/moohan)                  Version 4.8.5 20150623 (Red Hat 4.8.5-4)
                                    Version 4.9.3, Version 5.2.0
                                  Intel(R) C (icc), C++ (icpc), Fortran (icc)
                                  compilers:
                                     Version 15.0.3.187 Build 20150407
                                  MPICH 3.1.4 compiled with GCC 4.9.3

    SunOS 5.11 32- and 64-bit     Sun C 5.12 SunOS_sparc
    (emu)                         Sun Fortran 95 8.6 SunOS_sparc
                                  Sun C++ 5.12 SunOS_sparc

    Windows 7                     Visual Studio 2012 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2013 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2015 w/ Intel Fortran 16 (cmake)
                                  Cygwin(CYGWIN_NT-6.1 2.2.1(0.289/5/3) gcc(4.9.3) compiler and gfortran)
                                  (cmake and autotools)

    Windows 7 x64                 Visual Studio 2012 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2013 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2015 w/ Intel Fortran 16 (cmake)

    Windows 8.1                   Visual Studio 2012 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2013 w/ Intel Fortran 15 (cmake)

    Windows 8.1 x64               Visual Studio 2012 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2013 w/ Intel Fortran 15 (cmake)

    Mac OS X Mt. Lion 10.8.5      Apple clang/clang++ version 5.1 from Xcode 5.1
    64-bit                        gfortran GNU Fortran (GCC) 4.8.2
    (swallow/kite)                Intel icc/icpc/ifort version 15.0.3

    Mac OS X Mavericks 10.9.5     Apple clang/clang++ version 6.0 from Xcode 6.2
    64-bit                        gfortran GNU Fortran (GCC) 4.9.2
    (wren/quail)                  Intel icc/icpc/ifort version 15.0.3

    Mac OS X Yosemite 10.10.5     Apple clang/clang++ version 6.0 from Xcode 7.0
    64-bit                        gfortran GNU Fortran (GCC) 4.9.2
    (osx1010dev/osx1010test)      Intel icc/icpc/ifort version 15.0.3

    Mac OS X El Capitan 10.11.4   Apple clang/clang++ version 7.3.0 from Xcode 7.3
    64-bit                        gfortran GNU Fortran (GCC) 5.2.0
    (osx1010dev/osx1010test)      Intel icc/icpc/ifort version 15.0.3



Tested Configuration Features Summary
=====================================

    In the tables below
          y   = tested
          n   = not tested in this release
          C   = Cluster
          W   = Workstation
          x   = not working in this release
          dna = does not apply
          ( ) = footnote appears below second table
          <blank> = testing incomplete on this feature or platform

Platform                              C         F90/   F90      C++  zlib  SZIP
                                      parallel  F2003  parallel
SunOS 5.11 32-bit                       n        y/y    n        y    y     y
SunOS 5.11 64-bit                       n        y/y    n        y    y     y
Windows 7                               y        y/y    n        y    y     y
Windows 7 x64                           y        y/y    n        y    y     y
Windows 7 Cygwin                        n        y/y    n        y    y     n
Windows 8.1                             n        y/y    n        y    y     y
Windows 8.1 x64                         n        y/y    n        y    y     y
Mac OS X Mountain Lion 10.8.5 64-bit    n        y/y    n        y    y     y
Mac OS X Mavericks 10.9.5 64-bit        n        y/y    n        y    y     y
Mac OS X Yosemeti 10.10.5 64-bit        n        y/y    n        y    y     y
AIX 6.1 32- and 64-bit                  n        y/n    n        y    y     y
CentOS 6.7 Linux 2.6.32 x86_64 GNU      y        y/y    y        y    y     y
CentOS 6.7 Linux 2.6.32 x86_64 Intel    n        y/y    n        y    y     y
CentOS 6.7 Linux 2.6.32 x86_64 PGI      n        y/y    n        y    y     y
CentOS 7.1 Linux 3.10.0 x86_64 GNU      y        y/y    y        y    y     y
CentOS 7.1 Linux 3.10.0 x86_64 Intel    n        y/y    n        y    y     y
Linux 2.6.32-431.11.2.el6.ppc64         n        y/n    n        y    y     y

Platform                                 Shared  Shared    Shared    Thread-
                                         C libs  F90 libs  C++ libs  safe
SunOS 5.11 32-bit                          y       y         y         y
SunOS 5.11 64-bit                          y       y         y         y
Windows 7                                  y       y         y         y
Windows 7 x64                              y       y         y         y
Windows 7 Cygwin                           n       n         n         y
Windows 8.1                                y       y         y         y
Windows 8.1 x64                            y       y         y         y
Mac OS X Mountain Lion 10.8.5 64-bit       y       n         y         y
Mac OS X Mavericks 10.9.5 64-bit           y       n         y         y
Mac OS X Yosemeti 10.10.5 64-bit           y       n         y         y
AIX 6.1 32- and 64-bit                     y       n         n         y
CentOS 6.7 Linux 2.6.32 x86_64 GNU         y       y         y         y
CentOS 6.7 Linux 2.6.32 x86_64 Intel       y       y         y         y
CentOS 6.7 Linux 2.6.32 x86_64 PGI         y       y         y         y
CentOS 7.1 Linux 3.10.0 x86_64 GNU         y       y         y         y
CentOS 7.1 Linux 3.10.0 x86_64 Intel       y       y         y         y
Linux 2.6.32-431.11.2.el6.ppc64            y       y         y         y

Compiler versions for each platform are listed in the preceding
"Supported Platforms" table.



More Tested Platforms
=====================
The following platforms are not supported but have been tested for this release.

    Linux 2.6.18-431.11.2.el6     g95 (GCC 4.0.3 (g95 0.94!)
    #1 SMP x86_64 GNU/Linux
    (platypus)

    Windows 7                     Visual Studio 2008  (cmake)

    Windows 7 x64                 Visual Studio 2008  (cmake)

    Windows 7 x64                 Visual Studio 2010  (cmake) with SWMR using GPFS

    Windows 10                    Visual Studio 2013 w/ Intel Fortran 15 (cmake)

    Windows 10 x64                Visual Studio 2013 w/ Intel Fortran 15 (cmake)

    Debian7.5.0 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
                                  gcc (Debian 4.7.2-5) 4.7.2
                                  GNU Fortran (Debian 4.7.2-5) 4.7.2
                                  (cmake and autotools)

    Fedora20 3.15.3-200.fc20.x86_64 #1 SMP x86_64 x86_64 x86_64 GNU/Linux
                                  gcc (GCC) 4.8.3 20140624 (Red Hat 4.8.3-1)
                                  GNU Fortran (GCC) 4.8.3 20140624 (Red Hat 4.8.3-1)
                                  (cmake and autotools)

    SUSE 13.1 3.11.10-17-desktop #1 SMP PREEMPT x86_64 x86_64 x86_64 GNU/Linux
                                  gcc (SUSE Linux) 4.8.1
                                  GNU Fortran (SUSE Linux) 4.8.1
                                  (cmake and autotools)

    Ubuntu 14.04 3.13.0-35-generic #62-Ubuntu SMP x86_64 GNU/Linux
                                  gcc (Ubuntu/Linaro 4.9.1-0ubuntu1) 4.9.1
                                  GNU Fortran (Ubuntu/Linaro 4.9.1-0ubuntu1) 4.9.1
                                  (cmake and autotools)

    hopper.nersc.gov              PrgEnv-gnu/5.2.40
                                  gcc (GCC) 4.9.2 20141030 (Cray Inc.)
                                  GNU Fortran (GCC) 4.9.2 20141030 (Cray Inc.)
                                  g++ (GCC) 4.9.2 20141030 (Cray Inc.)



Known Problems and Limitations
==============================
This section contains the list of known problems and limitations introduced
in this release of HDF5.

Note: this list is not exhaustive of all known issues discovered in HDF5
software to date. For a list of significant problems and known workarounds
identified in past releases, please refer to:

https://www.hdfgroup.org/HDF5/release/known_problems/

The HDF Group also maintains a JIRA issue-tracking database which is used to
capture all known issues which are too numerous to reasonably list in this
document. The HDF Group is taking steps to make our JIRA issue database
open to the public, and this section will refer to that database in a future
release. In the meantime, please contact help@hdfgroup.org if you come across
an issue not listed here or at the link above, and we will provide any
information about known workarounds that we have or add it to our list of
known issues if it is a new issue.

 - The flush/refresh test occasionally fails on OS X platforms. This is
   being investigated but no fix or workaround is available at this time.
   (DER - 2016/03/22, HDFFV-9731)

 - The VDS/SWMR test will fail with a segmentation fault if the library
   is built with --enable-using-memchecker. The is due to a VDS shutdown
   procedure freeing a shared resource too early when the memory
   checker changes are built. This problem does not arise when the
   memory checker changes are not used since the internal library free
   lists behave differently. The memory checker configure option should
   normally only be used under special circumstances so this should not
   affect most users. Users should be aware that the --enable-using-memchecker
   + VDS combination may cause a segfault, however, so Valgrind et al. may
   have to be used with an HDF5 library built without the feature if this
   proves to be a problem.
   (DER - 2016/03/21, HDFFV-9732)

 - SWMR feature limitations
   The SWMR feature will only work if an HDF5 file under SWMR access resides
   on a file system that obeys POSIX write() ordering semantics. Because of
   this, SWMR will not work on  network file systems such as NFS or SMB/Windows
   file shares since those systems do not guarantee write odering. SWMR
   regression tests are likely to fail if run on a network file system. SWMR
   is currently not tested on Windows though it can be tested manually
   (some of the SWMR test programs are built by CMake), and there are no
   obvious reasons for it to not work on NTFS or GPFS.
   (EIP - 2016/03/20, HDFFV-9733)

 - VDS feature limitation
   Currently, the path to a VDS source file is interpreted as relative to the
   directory where the executable program runs and not to the HDF5 file with
   the VDS dataset unless a full path to the source file is specified during
   the mapping.
   (EIP - 2016/03/20, HDFFV-9724)

 - The H5Lexists API changed behavior in HDF5-1.10 when used with a file handle
   and root group name ("/"):

   H5Lexists(fileid, "/")

   In HDF5-1.8 it returns false (0) and in HDF5-1.10 it returns true (1).
   The documentation will be updated with information regarding this change.
   (LRK - 2016/03/30, HDFFV-8746)


%%%%1.10.0%%%%

HDF5 version 1.10.0 released on 2016-03-30
================================================================================



INTRODUCTION

This document describes the differences between HDF5-1.8 series and
HDF5 1.10.0 releases, and contains information on the platforms
tested.

Links to HDF5 1.10.0 source code can be found on The HDF Group's
development FTP server at the following location:

    https://www.hdfgroup.org/HDF5/release/obtain5110.html

User documentation can be accessed directly at this location:

    https://www.hdfgroup.org/HDF5/docNewFeatures/

For more information, see the HDF5 home page:

    https://www.hdfgroup.org/HDF5/

If you have any questions or comments, please send them to the HDF
Help Desk:

    help@hdfgroup.org



CONTENTS

- New Features
- Issues Addressed in this Release
- Supported Platforms
- Tested Configuration Features Summary
- More Tested Platforms
- Known Problems and Limitations



New Features
============
This release supports the following features:

    Configuration
    -------------
    - API Compatibility with HDF5 1.8 Flag Was Added

      The 1.10 version of the HDF5 Library can be configured to operate
      identically to the 1.8 library with the --with-default-api-version=v18
      configure flag. This allows existing code to be compiled with the 1.10
      library without requiring immediate changes to the application source
      code. For addtional configuration options and other details, see
      "API Compatibility Macros in HDF5" at
      https://www.hdfgroup.org/HDF5/doc/RM/APICompatMacros.html.

    - Autotools Configuration Has Been Extensively Reworked

      The autotools configuration options have been updated to allow more
      fine-grained control of the build options and to correct some bugs.
      See configure --help for comprehensive information on each option.

      Specific changes:

      * --enable-debug and --enable-production are no longer accepted.
        Use --enable-build-mode=(debug | production) instead. These set
        appropriate defaults for symbols, optimizations, and other
        configuration options. These defaults can be overridden by the
        user.

      * Extra debug output messages are no longer enabled with
        --enable-debug=<package list>. Use --enable-internal-debug=<pkg list>
        instead.

      * A new --enable-symbols option allows symbols to be generated
        independently of the build mode. --disable-symbols can be used
        to strip symbols from the binary.

      * A new --enable-asserts option sets/unsets NDEBUG. This is
        independent of the build mode. This also enables some extra
        low-overhead debug checks in the library.

      * A new --enable-profiling option sets profiling flags. This is
        independent of the build mode.

      * A new --enable-optimization option sets the optimization level.
        This is independent of the build mode.

      * Many of these options can take a flags string that will be used
        to build the library. This can be useful for specifying custom
        optimization flags such as -Os and -Ofast.

      * gnu C++ and Fortran use configure sub-files that update the
        build flags and turn on warnings. The increase in warnings when
        building these wrapper libraries is due to these flag changes
        and not to a decrease in code quality.

      * The option to clear file buffers has been removed. Any buffer that
        will eventually be written to disk will now always be memset
        to zero. This prevents the previous contents of the buffer from
        being written to the disk if the buffer contents are not
        completely overwritten, which has security implications.

    - LFS Changes

      The way the autotools handle large file support (LFS) has been
      overhauled in this release.

      * We assume ftello and fseeko exist

      * We no longer explicitly use the *64 I/O functions. Instead, we
        rely on a mapping provided by _FILE_OFFSET_BITS or its equivalent.

      * _LARGEFILE(64)_SOURCE is no longer exported via AM_CPPFLAGS.



    Parallel Library
    -----------------
    - Collective Metadata I/O

      Calls for HDF5 metadata can result in many small reads and writes.
      On metadata reads, collective metadata I/O can improve performance
      by allowing the library to perform optimizations when reading the
      metadata by having one rank read the data and broadcasting it to
      all other ranks.

      Collective metadata I/O improves metadata write performance through
      the construction of an MPI derived datatype that is then written
      collectively in a single call. For more information, see
      https://www.hdfgroup.org/HDF5/docNewFeatures/NewFeaturesCollectiveMetadataIoDocs.html.



    Library
    --------
    - Concurrent Access to HDF5 Files - Single Writer/ Multple Reader (SWMR)

      The Single Writer/ Multiple Reader or SWMR feature enables users to
      read data concurrently while writing it. Communications between the
      processes and file locking are not required. The processes can run
      on the same or on different platforms as long as they share a common
      file system that is POSIX compliant. For more information, see the
      Single-Writer/Multiple-Reader (SWMR) documentation at
      https://www.hdfgroup.org/HDF5/docNewFeatures/NewFeaturesSwmrDocs.html.

    - Virtual Dataset (VDS)

      The VDS feature enables data to be accessed across HDF5 files
      using standard HDF5 objects such as groups and datasets without
      rewriting or rearranging the data. An HDF5 virtual dataset (VDS)
      is an HDF5 dataset that is composed of source HDF5 datasets in
      a predefined mapping. VDS can be used with the SWMR feature. For
      documentation, check
      https://www.hdfgroup.org/HDF5/docNewFeatures/NewFeaturesVirtualDatasetDocs.html.

    - Persistent Free File Space Tracking

      Usage patterns when working with an HDF5 file sometimes result in
      wasted space within the file. This can also impair access times
      when working with the resulting files. The new file space management
      feature provides strategies for managing space in a file to improve
      performance in both of these areas. For more information, see
      https://www.hdfgroup.org/HDF5/docNewFeatures/NewFeaturesFileSpaceMgmtDocs.html.

    - Version 3 Metadata Cache

      The version 3 metadata cache moves management of metadata I/O from 
      the clients to the metadata cache proper.  This change is essential for
      SWMR and other features that have yet to be released.



    C++ Library
    ------------
    - New Member Function Added to H5::ArrayType

      The assignment operator ArrayType::operator= was added because
      ArrayType has pointer data members.

      (BMR - 2016/03/07, HDFFV-9562)



    Tools
    ------
    - h5watch

      The h5watch tool allows users to output new records appended to
      a dataset under SWMR access as it grows. The functionality is
      similar to the Unix user command "tail" with the follow option,
      which outputs appended data as the file grows. For more
      information, see
      https://www.hdfgroup.org/HDF5/docNewFeatures/NewFeaturesSwmrDocs.html#Tools.

    - h5format_convert

      The h5format_convert tool allows users to convert the indexing
      type of a chunked dataset made with a 1.10.x version of the HDF5
      Library when the latest file format is used to the 1.8.x version 1 B-tree indexing
      type. For example, datasets created using SWMR access, can be
      converted to be accessed by the HDF5 1.18 library and tools. The
      tool does not rewrite raw data, but it does rewrite HDF5 metadata.



    High-Level APIs
    ----------------
    - H5DOappend

      The function appends data to a dataset along a specified dimension.


    C Packet Table API
    ------------------
    - Replacement of a Public Function with H5PTcreate

      The existing function H5PTcreate_fl limits applications so they
      can use the deflate compression only. The public function
      H5PTcreate has been added to replace H5PTcreate_fl. H5PTcreate
      takes a property list identifier to provide flexibility on
      creation properties.

      (BMR - 2016/03/04, HDFFV-8623)

    - New Public Functions: H5PTget_dataset and H5PTget_type

      Two accessor functions have been added. H5PTget_dataset returns
      the identifier of the dataset associated with the packet table, 
      and H5PTget_type returns the identifier of the datatype used by
      the packet table.

      (BMR, 2016/03/04, HDFFV-8623)

    - Regarding #ifdef VLPT_REMOVED

      The #ifdef VLPT_REMOVED blocks have been removed from the packet
      table (PT) library source except for the following functions:
        + H5PTis_varlen() has been made available again
        + H5PTfree_vlen_readbuff() is now H5PTfree_vlen_buff()

      (BMR - 2016/03/04, HDFFV-442)

    C++ Packet Table API
    --------------------
    - New Constructor Added to FL_PacketTable

      An overloaded constructor has been added to FL_PacketTable and
      takes a property list identifier to provide flexibility on
      creation properties.

      (BMR - 2016/03/08, HDFFV-8623)

    - New Public Functions

      Two accessor wrappers are added to class PacketTable.
      PacketTable::GetDataset() returns the identifier of the dataset
      associated with the packet table, and PacketTable::GetDatatype()
      returns the identifier of the datatype that the packet table uses.

      (BMR - 2016/03/04, HDFFV-8623)

    - Member Functions with "char*" as an Argument

      Overloaded functions were added to provide the "const char*"
      argument; the existing version will be deprecated in future
      releases.

      (BMR - 2016/03/04, HDFFV-8623)

    - Regarding #ifdef VLPT_REMOVED

      The #ifdef VLPT_REMOVED blocks have been removed from the packet
      table library source code except for the following functions:
        + VL_PacketTable::IsVariableLength() was moved to PacketTable
        + VL_PacketTable::FreeReadBuff() is now PacketTable::FreeBuff()

      (BMR - 2016/03/04, HDFFV-442)



    Java Wrapper Library
    --------------------

    The Java HDF5 JNI library has been integrated into the HDF5 repository.
    The configure option is "--enable-java", and the CMake option is
    HDF5_BUILD_JAVA:BOOL=ON. The package hierarchy has changed from the
    HDF5 1.8 JNI, which was "ncsa.hdf.hdflib.hdf5", to HDF5 1.10,
    "hdf.hdflib.hdf5".

    A number of new APIs were added including some for VDS and SWMR.



    Other Important Changes
    -----------------------

    The hid_t type was changed from 32-bit to a 64-bit value.



Issues Addressed in this Release Since alpha1
=============================================

     - H5Pget_virtual_printf_gap, H5Pget_virtual_view, H5Pget_efile_prefix

       The correct access property list settings from the
       H5Pget_virtual_printf_gap, H5Pget_virtual_view, and
       H5Pget_efile_prefix function calls could not be retrieved
       using H5Dget_access_plist().

       Fixed.

       (DER and NAF - 2016/03/14, HDFFV-9716)

     - h5dump

       When h5dump was provided with the name of a non-existing file or
       when optional arguments were the last option on the command line,
       h5dump would segfault.

       Fixed.

       (ADB 2016/02/28 HDFFV-9639, HDFFV-9684)

     - No Error Message for Corrupt Metadata

       The HDF5 Library did not propagate an error when it encountered
       corrupt metadata in an HDF5 file. The issue was fixed for a
       specific file provided by a user. If you still see the problem,
       please contact help@hdfgroup.org

       Fixed.

       (MC - 2016/02/18, HDFFV-9670)

     - Problem Reading Chunked Datasets with a String Datatype Larger
       Than the Chunk Size in Bytes

       When the latest file format was used and when a chunked dataset
       was created with a datatype with the size bigger than a chunk
       size, the data could not be read back. The issue was reported
       for chunked datasets with a string datatype and was confirmed
       for other datatypes with the sizes bigger than the chunk size in
       bytes.

       Fixed.

       (JM - 2016/02/13, HDFFV-9672)

     - Control over the Location of External Files

       Users were unable to specify the locations of external files.

       Two APIs - H5Pget_efile_prefix and H5Pset_efile_prefix - were
       added so that users could specify the locations of external files.

       (DER - 2016/02/04, HDFFV-8740)



Issues Addressed in this Release Since alpha0
=============================================
    - h5format_convert

      The h5format_convert tool did not downgrade the version of the
      superblock.

      Fixed. The tool now will downgrade the version of the superblock.

      (EIP 2016/01/11)

    - Crashes with multiple threads: invalid pointers

      It was reported that alpha0 crashed when used with multiple
      threads. The issue exists in the HDF5 Library versions 1.8 and
      1.9. The problem is related to a shared file pointer used in some
      miscellaneous data structures. The thread-safe library exposed
      paths in the library where a file pointer became invalid.

      The alpha1 release contains the fixes for the specific use case
      as described in HDFFV-9643. We will keep working on identifying
      and fixing other paths in the library with similar problems.

      (EIP - 2016/01/15, HDFFV-9643)



Supported Platforms
===================
The following platforms are supported and have been tested for this release.
They are built with the configure process unless specified otherwise.

    AIX 6.1                       xlc/xlc_r 10.1.0.5
    (NASA G-ADA)                  xlC/xlC_r 10.1.0.5
                                  xlf90/xlf90_r 12.1.0.6

    Linux 2.6.32-573.18.1.el6    GNU C (gcc), Fortran (gfortran), C++ (g++)
    #1 SMP x86_64 GNU/Linux       compilers:
    (mayll/platypus)                 Version 4.4.7 20120313 (Red Hat 4.4.7-16)
                                     Version 4.9.3, Version 5.2.0
                                  PGI C, Fortran, C++ for 64-bit target on
                                  x86-64;
                                      Version 15.7-0
                                  Intel(R) C (icc), C++ (icpc), Fortran (icc)
                                  compilers:
                                     Version 15.0.3.187 Build 20150407
                                  MPICH 3.1.4 compiled with GCC 4.9.3

    Linux 2.6.32-504.8.1.el6.ppc64 gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-11)
    #1 SMP ppc64 GNU/Linux        g++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-11)
    (ostrich)                     GNU Fortran (GCC) 4.4.7 20120313 (Red Hat 4.4.7-11)
                                  IBM XL C/C++ V13.1
                                  IBM XL Fortran V15.1

    Linux 3.10.0-327.10.1.el7   GNU C (gcc), Fortran (gfortran), C++ (g++)
    #1 SMP x86_64 GNU/Linux       compilers:
    (kituo/moohan)                  Version 4.8.5 20150623 (Red Hat 4.8.5-4)
                                    Version 4.9.3, Version 5.2.0
                                  Intel(R) C (icc), C++ (icpc), Fortran (icc)
                                  compilers:
                                     Version 15.0.3.187 Build 20150407
                                  MPICH 3.1.4 compiled with GCC 4.9.3

    SunOS 5.11 32- and 64-bit     Sun C 5.12 SunOS_sparc
    (emu)                         Sun Fortran 95 8.6 SunOS_sparc
                                  Sun C++ 5.12 SunOS_sparc

    Windows 7                     Visual Studio 2012 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2013 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2015 w/ Intel Fortran 16 (cmake)
                                  Cygwin(CYGWIN_NT-6.1 2.2.1(0.289/5/3) gcc(4.9.3) compiler and gfortran)
                                  (cmake and autotools)

    Windows 7 x64                 Visual Studio 2012 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2013 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2015 w/ Intel Fortran 16 (cmake)

    Windows 8.1                   Visual Studio 2012 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2013 w/ Intel Fortran 15 (cmake)

    Windows 8.1 x64               Visual Studio 2012 w/ Intel Fortran 15 (cmake)
                                  Visual Studio 2013 w/ Intel Fortran 15 (cmake)

    Mac OS X Mt. Lion 10.8.5      Apple clang/clang++ version 5.1 from Xcode 5.1
    64-bit                  gfortran GNU Fortran (GCC) 4.8.2
    (swallow/kite)                Intel icc/icpc/ifort version 15.0.3

    Mac OS X Mavericks 10.9.5     Apple clang/clang++ version 6.0 from Xcode 6.2.0
    64-bit                  gfortran GNU Fortran (GCC) 4.9.2
    (wren/quail)                  Intel icc/icpc/ifort version 15.0.3

    Mac OS X Yosemite 10.10.5     Apple clang/clang++ version 6.0 from Xcode 7.0.0
    64-bit                  gfortran GNU Fortran (GCC) 4.9.2
    (osx1010dev/osx1010test)      Intel icc/icpc/ifort version 15.0.3

    Mac OS X El Capitan 10.11.3     Apple clang/clang++ version 7.0.2 from Xcode 7.0.2
    64-bit                  gfortran GNU Fortran (GCC) 5.2.0
    (osx1010dev/osx1010test)      Intel icc/icpc/ifort version 15.0.3



Tested Configuration Features Summary
=====================================

    In the tables below
          y   = tested
          n   = not tested in this release
          C   = Cluster
          W   = Workstation
          x   = not working in this release
          dna = does not apply
          ( ) = footnote appears below second table
          <blank> = testing incomplete on this feature or platform

Platform                              C         F90/   F90      C++  zlib  SZIP
                                      parallel  F2003  parallel
SunOS 5.11 32-bit                       n        y/y    n        y    y     y
SunOS 5.11 64-bit                       n        y/y    n        y    y     y
Windows 7                               y        y/y    n        y    y     y
Windows 7 x64                           y        y/y    n        y    y     y
Windows 7 Cygwin                        n        y/y    n        y    y     n
Windows 8.1                             n        y/y    n        y    y     y
Windows 8.1 x64                         n        y/y    n        y    y     y
Mac OS X Mountain Lion 10.8.5 64-bit    n        y/y    n        y    y     y
Mac OS X Mavericks 10.9.5 64-bit        n        y/y    n        y    y     y
Mac OS X Yosemeti 10.10.5 64-bit        n        y/y    n        y    y     y
AIX 6.1 32- and 64-bit                  n        y/n    n        y    y     y
CentOS 6.7 Linux 2.6.32 x86_64 GNU      y        y/y    y        y    y     y
CentOS 6.7 Linux 2.6.32 x86_64 Intel    n        y/y    n        y    y     y
CentOS 6.7 Linux 2.6.32 x86_64 PGI      n        y/y    n        y    y     y
CentOS 7.1 Linux 3.10.0 x86_64 GNU      y        y/y    y        y    y     y
CentOS 7.1 Linux 3.10.0 x86_64 Intel    n        y/y    n        y    y     y
Linux 2.6.32-431.11.2.el6.ppc64         n        y/n    n        y    y     y

Platform                                 Shared  Shared    Shared    Thread-
                                         C libs  F90 libs  C++ libs  safe
SunOS 5.11 32-bit                          y       y         y         y
SunOS 5.11 64-bit                          y       y         y         y
Windows 7                                  y       y         y         y
Windows 7 x64                              y       y         y         y
Windows 7 Cygwin                           n       n         n         y
Windows 8.1                                y       y         y         y
Windows 8.1 x64                            y       y         y         y
Mac OS X Mountain Lion 10.8.5 64-bit       y       n         y         y
Mac OS X Mavericks 10.9.5 64-bit           y       n         y         y
Mac OS X Yosemeti 10.10.5 64-bit           y       n         y         y
AIX 6.1 32- and 64-bit                     y       n         n         y
CentOS 6.7 Linux 2.6.32 x86_64 GNU         y       y         y         y
CentOS 6.7 Linux 2.6.32 x86_64 Intel       y       y         y         y
CentOS 6.7 Linux 2.6.32 x86_64 PGI         y       y         y         y
CentOS 7.1 Linux 3.10.0 x86_64 GNU         y       y         y         y
CentOS 7.1 Linux 3.10.0 x86_64 Intel       y       y         y         y
Linux 2.6.32-431.11.2.el6.ppc64            y       y         y         y

Compiler versions for each platform are listed in the preceding
"Supported Platforms" table.



More Tested Platforms
=====================
The following platforms are not supported but have been tested for this release.

    Linux 2.6.18-431.11.2.el6     g95 (GCC 4.0.3 (g95 0.94!)
    #1 SMP x86_64 GNU/Linux
    (platypus)

    Windows 7                     Visual Studio 2008  (cmake)

    Windows 7 x64                 Visual Studio 2008  (cmake)

    Windows 7 x64                 Visual Studio 2010  (cmake) with SWMR using GPFS

    Windows 10                    Visual Studio 2013 w/ Intel Fortran 15 (cmake)

    Windows 10 x64                Visual Studio 2013 w/ Intel Fortran 15 (cmake)

    Debian7.5.0 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
                                  gcc (Debian 4.7.2-5) 4.7.2
                                  GNU Fortran (Debian 4.7.2-5) 4.7.2
                                  (cmake and autotools)

    Fedora20 3.15.3-200.fc20.x86_64 #1 SMP x86_64 x86_64 x86_64 GNU/Linux
                                  gcc (GCC) 4.8.3 20140624 (Red Hat 4.8.3-1)
                                  GNU Fortran (GCC) 4.8.3 20140624 (Red Hat 4.8.3-1)
                                  (cmake and autotools)

    SUSE 13.1 3.11.10-17-desktop #1 SMP PREEMPT x86_64 x86_64 x86_64 GNU/Linux
                                  gcc (SUSE Linux) 4.8.1
                                  GNU Fortran (SUSE Linux) 4.8.1
                                  (cmake and autotools)

    Ubuntu 14.04 3.13.0-35-generic #62-Ubuntu SMP x86_64 GNU/Linux
                                  gcc (Ubuntu/Linaro 4.9.1-0ubuntu1) 4.9.1
                                  GNU Fortran (Ubuntu/Linaro 4.9.1-0ubuntu1) 4.9.1
                                  (cmake and autotools)

    hopper.nersc.gov              PrgEnv-gnu/5.2.40
                                  gcc (GCC) 4.9.2 20141030 (Cray Inc.)
                                  GNU Fortran (GCC) 4.9.2 20141030 (Cray Inc.)
                                  g++ (GCC) 4.9.2 20141030 (Cray Inc.)



Known Problems and Limitations
==============================
This section contains the list of known problems and limitations introduced
in this release of HDF5.

Note: this list is not exhaustive of all known issues discovered in HDF5
software to date. For a list of significant problems and known workarounds
identified in past releases, please refer to:

https://www.hdfgroup.org/HDF5/release/known_problems/

The HDF Group also maintains a JIRA issue-tracking database which is used to
capture all known issues which are too numerous to reasonably list in this
document. The HDF Group is taking steps to make our JIRA issue database
open to the public, and this section will refer to that database in a future
release. In the meantime, please contact help@hdfgroup.org if you come across
an issue not listed here or at the link above, and we will provide any
information about known workarounds that we have or add it to our list of
known issues if it is a new issue.

 - The JUnit-interface test may fail on Solaris platforms. The result of
   a test for verifying the content of the error stack to stdout is
   in a different order on Solaris then other platforms. Use make -i option
   to test beyond the java/test folder.
   (ADB - 2016/03/22, HDFFV-9734)

 - The flush/refresh test occasionally fails on OS X platforms. This is
   being investigated but no fix or workaround is available at this time.
   (DER - 2016/03/22, HDFFV-9731)

 - The VDS/SWMR test will fail with a segmentation fault if the library
   is built with --enable-using-memchecker. The is due to a VDS shutdown
   procedure freeing a shared resource too early when the memory
   checker changes are built. This problem does not arise when the
   memory checker changes are not used since the internal library free
   lists behave differently. The memory checker configure option should
   normally only be used under special circumstances so this should not
   affect most users. Users should be aware that the --enable-using-memchecker
   + VDS combination may cause a segfault, however, so Valgrind et al. may
   have to be used with an HDF5 library built without the feature if this
   proves to be a problem.
   (DER - 2016/03/21, HDFFV-9732)

 - SWMR feature limitations
   The SWMR feature will only work if an HDF5 file under SWMR access resides
   on a file system that obeys POSIX write() ordering semantics. Because of
   this, SWMR will not work on  network file systems such as NFS or SMB/Windows
   file shares since those systems do not guarantee write odering. SWMR
   regression tests are likely to fail if run on a network file system. SWMR
   is currently not tested on Windows though it can be tested manually
   (some of the SWMR test programs are built by CMake), and there are no
   obvious reasons for it to not work on NTFS or GPFS.
   (EIP - 2016/03/20, HDFFV-9733)

 - VDS feature limitation
   Currently, the path to a VDS source file is interpreted as relative to the
   directory where the executable program runs and not to the HDF5 file with
   the VDS dataset unless a full path to the source file is specified during
   the mapping.
   (EIP - 2016/03/20, HDFFV-9724)

 - When building HDF5 with Java using CMake and specifying Debug for CMAKE_BUILD_TYPE,
   there is a missing command argument for the tests of the examples.

   This error can be avoided by not building Java with Debug, HDF5_BUILD_JAVA:BOOL=OFF, 
   or not building Examples, HDF5_BUILD_EXAMPLES:BOOL=OFF.
   (LRK - 2016/03/30, HDFFV-9743) 

 - The H5Lexists API changed behavior in HDF5-1.10 when used with a file handle 
   and root group name ("/"):

   H5Lexists(fileid, "/")

   In HDF5-1.8 it returns false (0) and in HDF5-1.10 it returns true (1). 
   The documentation will be updated with information regarding this change.
   (LRK - 2016/03/30, HDFFV-8746)

